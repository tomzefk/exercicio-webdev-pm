{"version":3,"file":"static/css/main.68dcb14b.css","mappings":"AAAA,EACE,qBACF,CAEA,KAKE,kCAAmC,CACnC,iCAAkC,CAJlC,mIAEY,CAHZ,QAMF,CAEA,UAEE,WAAY,CACZ,QAAS,CACT,SACF,CCfA,QAEE,aACA,sBAEA,aADA,uBACA,CAEA,sBAIE,oBADA,aAFA,SAIA,gBCyiBA,wBDriBE,wBAEE,gBADA,kBACA,CAGF,sCACE,SACA,QAKA,2CACE,SAGF,4CACE,SACA,eACA,iBEnCV,OAGI,mBAFA,aACA,mBAEA,SACA,iBAEA,mCACI,eD6iBJ,wBC9iBA,mCAGQ,cCVZ,2BAMI,yBAHA,aAFA,SAGA,sBACA,6BCJO,CDgBP,+BACI,aAEA,kCACI,gBAEA,QAAO,CADP,SACA,CAEA,qCACI,aAEA,uCAKI,WAHA,iBACA,gBAFA,YAGA,oBC9BR,CDiCQ,6DACI,gBAOpB,qDAKI,yBADA,6BAHA,aAEA,aADA,kBCpCQ,CDyCR,uDAGI,WAFA,eACA,QClDA,CDqDA,yDAEI,cADA,oBACA,CE1DhB,+BAEI,iBAEA,iEAMI,yBAFA,eAHA,aACA,mBAGA,gBAFA,6BDMc,CCDd,uEACI,wBDDD,CCKP,iEACI,aAGJ,mEAEI,sBADA,cDnBI,CCsBJ,2FACI,aC1BZ,8BAII,mBAEA,cAJA,aADA,eAEA,QFDO,CEMP,4DACI,gBAGJ,mDACI,wBAEA,gBAEA,qCASA,yBACA,kBANA,aAIA,cANA,SAGA,qBAEA,YAGA,CAGA,0DAQI,sBAJA,0IAHA,WAEA,aAEA,0EACA,sEACA,4BALA,WF7BA,CEuCJ,2DACI,wBF1CC,CE2CD,oBFnCM,CEqCN,6DACI,gBAGJ,kEACI,4EASR,4DACI,iDAAkD,CAElD,mCACA,mBChEZ,4BACI,aACA,mBACA,eAEA,cAGA,gCACI,eAGJ,8CACI,aACA,sBACA,cCfR,YACI,aACA,sBAGA,kBAII,cAHA,eACA,eACA,eJNG,CIUP,kBACI,wBAOA,4CALA,gBACA,eACA,eACA,gBAEA,CAEA,wBACI,aAGJ,wBACI,oBJtBA,CI2BJ,oBACI,aJ5BA,CI6BA,gBAEA,2BACI,SACA,SACA,UACA,kBCvChB,2BACI,wBAKA,qBLJQ,CKER,YAFA,wBAGA,mBAKA,cADA,eADA,gBALA,iBLFO,CHojBP,wBQrjBJ,2BAaQ,YAGJ,iCACI,eAGJ,iDAEI,yBADA,ULrBK,CKwBL,uDACI,wBLjBM,CKqBd,mDACI,yBACA,aL9BG,CHojBP,wBQphBI,yDAEQ,wBLxBL,EH0iBP,wBQxhBA,mDAWQ,6BACA,aCzCZ,qCAGI,wBNUmB,CMZnB,WAGA,kBAFA,YAEA,CAEA,yEAII,cAFA,eACA,gBAFA,QNNG,CMYP,+EACI,aAEA,SADA,wBACA,CTqiBJ,wBSxiBA,+EAMQ,uBACA","sources":["index.css","App.scss","styles/_responsive_helper.scss","components/header/Header.module.scss","components/sidebar/Sidebar.module.scss","styles/_colors.scss","components/accordion/Accordion.module.scss","components/inputs/checkbox/Checkbox.module.scss","pages/userSettings/components/userInfo/UserInfo.module.scss","styles/_inputs.scss","components/inputs/button/Button.module.scss","pages/userSettings/SettingsWrapper.module.scss"],"sourcesContent":["* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\nhtml,\nbody {\n  height: 100%;\n  margin: 0;\n  padding: 0;\n}","@use \"./styles/_responsive_helper\";\n@use \"./styles/_colors\";\n\ndiv#App {\n\n  display: flex;\n  flex-direction: column;\n  justify-content: stretch;\n  height: 100vh;\n\n  div.container {\n    flex: 1;\n\n    display: flex;\n    align-items: stretch;\n    overflow: hidden;\n\n    @include responsive_helper.media(\"<=tablet\") {\n\n      &>* {\n        white-space: nowrap;\n        transition: 0.25s;\n      }\n\n      &>div:nth-child(1) {\n        flex: 0;\n        width: 0;\n      }\n\n      &.open {\n\n        &>div:nth-child(1) {\n          flex: 1;\n        }\n\n        &>div:nth-child(2) {\n          flex: 0;\n          padding-left: 0;\n          padding-right: 0;\n        }\n\n      }\n    }\n\n  }\n}","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 319px,\n  'tablet': 768px,\n  'desktop': 1024px,\n  'laptop': 1366px\n) !default;\n\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi)'\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n","@use '../../styles/_colors';\n@use '../../styles/_responsive_helper';\n\nheader {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    gap: 1rem;\n    padding: 8px 16px;\n\n    svg.menu-icon {\n        font-size: 2rem;\n        @include responsive_helper.media(\">tablet\") {\n            display: none;\n        }\n    }\n}","@use '../../styles/_colors';\n@use \"../../styles/_responsive_helper\";\n\ndiv.sidebar {\n    flex: 1;\n\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n    background-color: colors.$main;\n\n    @include responsive_helper.media(\"<=tablet\") {\n        // display: none;\n        \n        // &.open {\n        //     display:flex;\n        //     // margin-left: -54%;\n        // }\n    }\n\n    nav {\n        padding: 48px;\n\n        ul {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n\n            li {\n                padding: 12px;\n\n                a {\n                    padding: 8px;\n                    font-size: 1.1rem;\n                    font-weight: 500;\n                    text-decoration: none;\n                    color: colors.$white;\n\n                    &.active {\n                        font-weight: 800;\n                    }\n                }\n            }\n        }\n    }\n\n    div.footer {\n        display: grid;\n        place-items: center;\n        padding: 24px;\n        border-top: 1px solid colors.$main-border;\n        background-color: colors.$main-dark;\n\n        p {\n            font-size: 14px;\n            margin: 0;\n            color: colors.$white;\n\n            a {\n                text-decoration: none;\n                color: inherit;\n            }\n        }\n    }\n}","// Colors\n\n    // Main\n    $accent: #02ade6;\n    $main: #2e3747;\n    $white: #FFFFFF;\n    // --\n    $error: #FF6962;\n    $success: #68b86f;\n\n    // Alt\n    $accent-dark: #0098cf;\n    $main-dark: #252b39;\n    $main-border: #404857;\n    $grey: #d8d8d8;\n    $background-dark: #e8e8e8;\n    $background-light: #f4f4f4;\n\n    // Inputs\n    $input-label: #788499;\n\n","@use '../../styles/_colors';\n\ndiv.accordion {\n    // max-width: 600px;\n    margin: 2rem auto;\n    \n    .accordion-title {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        cursor: pointer;\n        font-weight: 600;\n        background-color: colors.$background-dark;\n\n        &:hover {\n            background-color: colors.$grey;\n        }\n    }\n\n    .accordion-title {\n        padding: 1rem;\n    }\n    \n    .accordion-content {\n        padding: 1.8rem;\n        background-color: colors.$white;\n\n        &.hidden {\n            display: none;\n        }\n    }\n}","@use '../../../styles/_colors';\n\nlabel.wrapper {\n    font-size: 1rem;\n    display: flex;\n    gap: 12px;\n    align-items: center;\n\n    color: colors.$main;\n\n    &+label.wrapper {\n        margin-top: 1rem;\n    }\n\n    input[type=\"checkbox\"] {\n        -webkit-appearance: none;\n        /* Remove most all native input styles */\n        appearance: none;\n        /* For iOS < 15 */\n        background-color: #AAAAAA10;\n        /* Not removed with appearance */\n        margin: 0;\n\n        display: grid;\n        place-content: center;\n\n        width: 1.5rem;\n        height: 1.5rem;\n        border: 2px solid colors.$grey;\n        border-radius: 1px;\n\n\n        &::before {\n            content: \"\";\n            width: 0.65em;\n            height: 0.65em;\n            clip-path: polygon(14% 50%, 0% 70%, 35% 100%, 100% 12%, 88% 0%, 35% 65%);\n            transform: scale(0) rotate(90deg);\n            transform-origin: center center;\n            transition: 0.25s ease-in-out;\n            background-color: colors.$white;\n\n        }\n\n        &:checked {\n            background-color: colors.$accent;\n            border-color: colors.$accent-dark;\n\n            &+* {\n                font-weight: 700;\n            }\n\n            &::before {\n                transform: scale(1.2) rotate(0deg);\n            }\n        }\n\n        // &:focus {\n        //     outline: max(2px, 0.15em) solid currentColor;\n        //     outline-offset: max(2px, 0.15em);\n        // }\n\n        &:disabled {\n            --form-control-color: var(--form-control-disabled);\n\n            color: var(--form-control-disabled);\n            cursor: not-allowed;\n        }\n    }\n}","@use '../../../../styles/_colors';\n\ndiv.wrapper {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    // align-content: flex-start;\n    gap: 2rem 4rem;\n    // max-height: 320px;\n\n    & > div {\n        flex-basis: 35%;\n    }\n\n    & > div:first-of-type {\n        display: flex;\n        flex-direction: column;\n        gap: 2rem 4rem;\n    }\n}","@use '../styles/_colors';\n\ndiv.wrapper {\n    display: flex;\n    flex-direction: column;\n    // flex-basis: 50%;\n\n    label {\n        display: inline;\n        font-size: 1rem;\n        font-weight: 600;\n        color: colors.$main;\n    }\n\n    input {\n        -webkit-appearance: none;\n        -webkit-border-radius: 0;\n        border-radius: 0;\n        display: inline;\n        font-size: 1rem;\n        padding: 12px 8px;\n        border: none;\n        border-bottom: 2px solid colors.$grey;\n\n        &:focus {\n            outline: none;\n        }\n\n        &.error {\n            border-color: colors.$error;\n        }\n    }\n\n    p {\n        &.error {\n            color: colors.$error;\n            transition: 0.25s;\n\n            &.hidden {\n                height: 0;\n                margin: 0;\n                opacity: 0;\n                visibility: hidden;\n            }\n        }\n    }\n}","@use '../../../styles/_colors';\n@use '../../../styles/_responsive_helper';\n\ninput.button {\n    -webkit-appearance: none;\n    -webkit-border-radius: 0px;\n    padding: 10px 64px;\n    border: none;\n    border-radius: 2rem;\n    background-color: colors.$white;\n\n    font-weight: 600;\n    font-size: 1rem;\n    color: colors.$main;\n\n    @include responsive_helper.media(\"<=tablet\") {\n        width: 100%;\n    }\n\n    &:hover {\n        cursor: pointer;\n    }\n\n    &.primary {\n        color: colors.$white;\n        background-color: colors.$accent;\n\n        &:hover {\n            background-color: colors.$accent-dark;\n        }\n    }\n\n    &.secondary {\n        border: 1px solid colors.$grey;\n        color: colors.$main;\n\n        &:hover {\n            @include responsive_helper.media(\">tablet\") {\n                background-color: colors.$grey;\n            }\n        }\n\n        @include responsive_helper.media(\"<=tablet\") {\n            background-color: transparent;\n            border: none;\n        }\n    }\n}","@use '../../styles/_colors';\n@use '../../styles/_responsive_helper';\n\ndiv.container {\n    flex: 3.5;\n    padding: 48px;\n    background-color: colors.$background-light;\n    overflow-y: scroll;\n\n    h1.pageTitle {\n        margin: 0;\n        font-size: 2rem;\n        font-weight: 500;\n        color: colors.$main;\n    }\n\n    div.actionsWrapper {\n        display: flex;\n        justify-content: flex-end;\n        gap: 1rem;\n\n        @include responsive_helper.media(\"<=tablet\") {\n            flex-wrap: wrap-reverse;\n            justify-content: center;\n        }\n    }\n}"],"names":[],"sourceRoot":""}