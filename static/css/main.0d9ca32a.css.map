{"version":3,"file":"static/css/main.0d9ca32a.css","mappings":"AAAA,EACE,qBACF,CAEA,KAKE,kCAAmC,CACnC,iCAAkC,CAJlC,mIAEY,CAHZ,QAMF,CAEA,UAEE,WAAY,CACZ,QAAS,CACT,SACF,CCfA,QAEE,aACA,sBAEA,aADA,uBACA,CAEA,sBAIE,oBADA,aAFA,SAIA,gBCyiBA,wBDriBE,wBAEE,gBADA,kBACA,CAGF,sCACE,SACA,QAKA,2CACE,SAGF,4CACE,SACA,eACA,iBEnCV,OAGI,mBAFA,aACA,mBAEA,SACA,iBAEA,mCACI,eD6iBJ,wBC9iBA,mCAGQ,cCVZ,2BAMI,yBAHA,aAFA,SAGA,sBACA,6BCJO,CDgBP,+BACI,aAEA,kCACI,gBAEA,QAAO,CADP,SACA,CAEA,qCACI,aAEA,uCAKI,WAHA,iBACA,gBAFA,YAGA,oBC9BR,CDiCQ,6DACI,gBAOpB,qDAKI,yBADA,6BAHA,aAEA,aADA,kBCpCQ,CDyCR,uDAGI,WAFA,eACA,QClDA,CDqDA,yDAEI,cADA,oBACA,CE1DhB,+BAEI,iBAEA,iEAMI,yBAFA,eAHA,aACA,mBAGA,gBAFA,6BDMc,CCDd,uEACI,wBDDD,CCKP,iEACI,aAGJ,mEAEI,sBADA,cDnBI,CCsBJ,2FACI,aC1BZ,8BAII,mBAEA,cAJA,aADA,eAEA,QFDO,CEMP,4DACI,gBAGJ,mDACI,wBAEA,gBAEA,qCASA,yBACA,kBANA,aAIA,cANA,SAGA,qBAEA,YAGA,CAGA,0DAQI,sBAJA,0IAHA,WAEA,aAEA,0EACA,sEACA,4BALA,WF7BA,CEuCJ,2DACI,wBF1CC,CE2CD,oBFnCM,CEqCN,6DACI,gBAGJ,kEACI,4EASR,4DACI,iDAAkD,CAElD,mCACA,mBChEZ,4BACI,aACA,mBACA,eAEA,cAGA,gCACI,eAGJ,8CACI,aACA,sBACA,cCfR,YACI,aACA,sBAGA,kBAII,cAHA,eACA,eACA,eJNG,CIUP,kBACI,wBAOA,4CALA,gBACA,eACA,eACA,gBAEA,CAEA,wBACI,aAGJ,wBACI,oBJtBA,CI2BJ,oBACI,aJ5BA,CI6BA,gBAEA,2BACI,SACA,SACA,UACA,kBCvChB,2BACI,wBAKA,qBLJQ,CKER,YAFA,wBAGA,mBAKA,cADA,eADA,gBALA,iBLFO,CHojBP,wBQrjBJ,2BAaQ,YAGJ,iCACI,eAGJ,iDAEI,yBADA,ULrBK,CKwBL,uDACI,wBLjBM,CKqBd,mDACI,yBACA,aL9BG,CHojBP,wBQphBI,yDAEQ,wBLxBL,EH0iBP,wBQxhBA,mDAWQ,6BACA,aCzCZ,qCAGI,wBNUmB,CMZnB,WAGA,kBAFA,YAEA,CAEA,yEAII,cAFA,eACA,gBAFA,QNNG,CMYP,+EACI,aAEA,SADA,wBACA,CTqiBJ,wBSxiBA,+EAMQ,uBACA","sources":["index.css","App.scss","styles/_responsive_helper.scss","components/header/Header.module.scss","components/sidebar/Sidebar.module.scss","styles/_colors.scss","components/accordion/Accordion.module.scss","components/inputs/checkbox/Checkbox.module.scss","pages/userSettings/components/userInfo/UserInfo.module.scss","styles/_inputs.scss","components/inputs/button/Button.module.scss","pages/userSettings/SettingsWrapper.module.scss"],"sourcesContent":["* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\nhtml,\r\nbody {\r\n  height: 100%;\r\n  margin: 0;\r\n  padding: 0;\r\n}","@use \"./styles/_responsive_helper\";\r\n@use \"./styles/_colors\";\r\n\r\ndiv#App {\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: stretch;\r\n  height: 100vh;\r\n\r\n  div.container {\r\n    flex: 1;\r\n\r\n    display: flex;\r\n    align-items: stretch;\r\n    overflow: hidden;\r\n\r\n    @include responsive_helper.media(\"<=tablet\") {\r\n\r\n      &>* {\r\n        white-space: nowrap;\r\n        transition: 0.25s;\r\n      }\r\n\r\n      &>div:nth-child(1) {\r\n        flex: 0;\r\n        width: 0;\r\n      }\r\n\r\n      &.open {\r\n\r\n        &>div:nth-child(1) {\r\n          flex: 1;\r\n        }\r\n\r\n        &>div:nth-child(2) {\r\n          flex: 0;\r\n          padding-left: 0;\r\n          padding-right: 0;\r\n        }\r\n\r\n      }\r\n    }\r\n\r\n  }\r\n}","@charset \"UTF-8\";\r\n\r\n//     _            _           _                           _ _\r\n//    (_)          | |         | |                         | (_)\r\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\r\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\r\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\r\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\r\n//\r\n//      Simple, elegant and maintainable media queries in Sass\r\n//                        v1.4.9\r\n//\r\n//        https://eduardoboucas.github.io/include-media\r\n//\r\n//         Authors: Eduardo Boucas (@eduardoboucas)\r\n//                  Kitty Giraudel (@kittygiraudel)\r\n//\r\n//      This project is licensed under the terms of the MIT license\r\n////\r\n/// include-media library public configuration\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Creates a list of global breakpoints\r\n///\r\n/// @example scss - Creates a single breakpoint with the label `phone`\r\n///  $breakpoints: ('phone': 320px);\r\n///\r\n$breakpoints: (\r\n  'phone': 319px,\r\n  'tablet': 768px,\r\n  'desktop': 1024px,\r\n  'laptop': 1366px\r\n) !default;\r\n\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Creates a list of static expressions or media types\r\n///\r\n/// @example scss - Creates a single media type (screen)\r\n///  $media-expressions: ('screen': 'screen');\r\n///\r\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\r\n///  $media-expressions: (\r\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\r\n///  );\r\n///\r\n$media-expressions: (\r\n  'screen': 'screen',\r\n  'print': 'print',\r\n  'handheld': 'handheld',\r\n  'landscape': '(orientation: landscape)',\r\n  'portrait': '(orientation: portrait)',\r\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\r\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\r\n) !default;\r\n\r\n\r\n///\r\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\r\n///\r\n/// @example scss - Interval for pixels is defined as `1` by default\r\n///  @include media('>128px') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 129px) {}\r\n///\r\n/// @example scss - Interval for ems is defined as `0.01` by default\r\n///  @include media('>20em') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 20.01em) {}\r\n///\r\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\r\n///  @include media('>2.0rem') {}\r\n///\r\n///  /* Generates: */\r\n///  @media (min-width: 2.1rem) {}\r\n///\r\n$unit-intervals: (\r\n  'px': 1,\r\n  'em': 0.01,\r\n  'rem': 0.1,\r\n  '': 0\r\n) !default;\r\n\r\n///\r\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\r\n/// for browsers that don't support media queries.\r\n///\r\n/// @example scss - Disables support for media queries\r\n///  $im-media-support: false;\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n$im-media-support: true !default;\r\n\r\n///\r\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\r\n/// intercept the breakpoint will be displayed, any others will be ignored.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  @include media('>=tablet') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* Generates: */\r\n///  .foo {\r\n///    color: tomato;\r\n///  }\r\n///\r\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'tablet';\r\n///  @include media('>=desktop') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-breakpoint: 'desktop' !default;\r\n\r\n///\r\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\r\n/// are not supported.\r\n///\r\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'screen') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///   /* Generates: */\r\n///   .foo {\r\n///     color: tomato;\r\n///   }\r\n///\r\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\r\n///  $im-media-support: false;\r\n///  $im-no-media-breakpoint: 'desktop';\r\n///  $im-no-media-expressions: ('screen');\r\n///  @include media('>=tablet', 'retina2x') {\r\n///    .foo {\r\n///      color: tomato;\r\n///    }\r\n///  }\r\n///\r\n///  /* No output */\r\n///\r\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\r\n\r\n////\r\n/// Cross-engine logging engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Log a message either with `@error` if supported\r\n/// else with `@warn`, using `feature-exists('at-error')`\r\n/// to detect support.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@function im-log($message) {\r\n  @if feature-exists('at-error') {\r\n    @error $message;\r\n  } @else {\r\n    @warn $message;\r\n    $_: noop();\r\n  }\r\n\r\n  @return $message;\r\n}\r\n\r\n\r\n///\r\n/// Wrapper mixin for the log function so it can be used with a more friendly\r\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\r\n/// within functions because it is not possible to include a mixin in a function\r\n/// and use the mixin everywhere else because it's much more elegant.\r\n///\r\n/// @param {String} $message - Message to log\r\n///\r\n@mixin log($message) {\r\n  @if im-log($message) {}\r\n}\r\n\r\n\r\n///\r\n/// Function with no `@return` called next to `@warn` in Sass 3.3\r\n/// to trigger a compiling error and stop the process.\r\n///\r\n@function noop() {}\r\n\r\n///\r\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\r\n///\r\n@function im-intercepts-static-breakpoint($conditions...) {\r\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\r\n\r\n  @if not $no-media-breakpoint-value {\r\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\r\n  }\r\n\r\n  @each $condition in $conditions {\r\n    @if not map-has-key($media-expressions, $condition) {\r\n      $operator: get-expression-operator($condition);\r\n      $prefix: get-expression-prefix($operator);\r\n      $value: get-expression-value($condition, $operator);\r\n\r\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\r\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\r\n        @return false;\r\n      }\r\n    } @else if not index($im-no-media-expressions, $condition) {\r\n      @return false;\r\n    }\r\n  }\r\n\r\n  @return true;\r\n}\r\n\r\n////\r\n/// Parsing engine\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Get operator of an expression\r\n///\r\n/// @param {String} $expression - Expression to extract operator from\r\n///\r\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\r\n///\r\n@function get-expression-operator($expression) {\r\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\r\n    @if str-index($expression, $operator) {\r\n      @return $operator;\r\n    }\r\n  }\r\n\r\n  // It is not possible to include a mixin inside a function, so we have to\r\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n  // functions cannot be called anywhere in Sass, we need to hack the call in\r\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n  $_: im-log('No operator found in `#{$expression}`.');\r\n}\r\n\r\n\r\n///\r\n/// Get dimension of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract dimension from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {String} - `width` or `height` (or potentially anything else)\r\n///\r\n@function get-expression-dimension($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\r\n  $dimension: 'width';\r\n\r\n  @if str-length($parsed-dimension) > 0 {\r\n    $dimension: $parsed-dimension;\r\n  }\r\n\r\n  @return $dimension;\r\n}\r\n\r\n\r\n///\r\n/// Get dimension prefix based on an operator\r\n///\r\n/// @param {String} $operator - Operator\r\n///\r\n/// @return {String} - `min` or `max`\r\n///\r\n@function get-expression-prefix($operator) {\r\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\r\n}\r\n\r\n\r\n///\r\n/// Get value of an expression, based on a found operator\r\n///\r\n/// @param {String} $expression - Expression to extract value from\r\n/// @param {String} $operator - Operator from `$expression`\r\n///\r\n/// @return {Number} - A numeric value\r\n///\r\n@function get-expression-value($expression, $operator) {\r\n  $operator-index: str-index($expression, $operator);\r\n  $value: str-slice($expression, $operator-index + str-length($operator));\r\n\r\n  @if map-has-key($breakpoints, $value) {\r\n    $value: map-get($breakpoints, $value);\r\n  } @else {\r\n    $value: to-number($value);\r\n  }\r\n\r\n  $interval: map-get($unit-intervals, unit($value));\r\n\r\n  @if not $interval {\r\n    // It is not possible to include a mixin inside a function, so we have to\r\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\r\n    // functions cannot be called anywhere in Sass, we need to hack the call in\r\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\r\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\r\n    $_: im-log('Unknown unit `#{unit($value)}`.');\r\n  }\r\n\r\n  @if $operator == '>' {\r\n    $value: $value + $interval;\r\n  } @else if $operator == '<' {\r\n    $value: $value - $interval;\r\n  }\r\n\r\n  @return $value;\r\n}\r\n\r\n\r\n///\r\n/// Parse an expression to return a valid media-query expression\r\n///\r\n/// @param {String} $expression - Expression to parse\r\n///\r\n/// @return {String} - Valid media query\r\n///\r\n@function parse-expression($expression) {\r\n  // If it is part of $media-expressions, it has no operator\r\n  // then there is no need to go any further, just return the value\r\n  @if map-has-key($media-expressions, $expression) {\r\n    @return map-get($media-expressions, $expression);\r\n  }\r\n\r\n  $operator: get-expression-operator($expression);\r\n  $dimension: get-expression-dimension($expression, $operator);\r\n  $prefix: get-expression-prefix($operator);\r\n  $value: get-expression-value($expression, $operator);\r\n\r\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\r\n}\r\n\r\n///\r\n/// Slice `$list` between `$start` and `$end` indexes\r\n///\r\n/// @access private\r\n///\r\n/// @param {List} $list - List to slice\r\n/// @param {Number} $start [1] - Start index\r\n/// @param {Number} $end [length($list)] - End index\r\n///\r\n/// @return {List} Sliced list\r\n///\r\n@function slice($list, $start: 1, $end: length($list)) {\r\n  @if length($list) < 1 or $start > $end {\r\n    @return ();\r\n  }\r\n\r\n  $result: ();\r\n\r\n  @for $i from $start through $end {\r\n    $result: append($result, nth($list, $i));\r\n  }\r\n\r\n  @return $result;\r\n}\r\n\r\n////\r\n/// String to number converter\r\n/// @author Kitty Giraudel\r\n/// @access private\r\n////\r\n\r\n\r\n///\r\n/// Casts a string into a number\r\n///\r\n/// @param {String | Number} $value - Value to be parsed\r\n///\r\n/// @return {Number}\r\n///\r\n@function to-number($value) {\r\n  @if type-of($value) == 'number' {\r\n    @return $value;\r\n  } @else if type-of($value) != 'string' {\r\n    $_: im-log('Value for `to-number` should be a number or a string.');\r\n  }\r\n\r\n  $first-character: str-slice($value, 1, 1);\r\n  $result: 0;\r\n  $digits: 0;\r\n  $minus: ($first-character == '-');\r\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\r\n\r\n  // Remove +/- sign if present at first character\r\n  @if ($first-character == '+' or $first-character == '-') {\r\n    $value: str-slice($value, 2);\r\n  }\r\n\r\n  @for $i from 1 through str-length($value) {\r\n    $character: str-slice($value, $i, $i);\r\n\r\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\r\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\r\n    }\r\n\r\n    @if $character == '.' {\r\n      $digits: 1;\r\n    } @else if $digits == 0 {\r\n      $result: $result * 10 + map-get($numbers, $character);\r\n    } @else {\r\n      $digits: $digits * 10;\r\n      $result: $result + map-get($numbers, $character) / $digits;\r\n    }\r\n  }\r\n\r\n  @return if($minus, -$result, $result);\r\n}\r\n\r\n\r\n///\r\n/// Add `$unit` to `$value`\r\n///\r\n/// @param {Number} $value - Value to add unit to\r\n/// @param {String} $unit - String representation of the unit\r\n///\r\n/// @return {Number} - `$value` expressed in `$unit`\r\n///\r\n@function to-length($value, $unit) {\r\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\r\n\r\n  @if not index(map-keys($units), $unit) {\r\n    $_: im-log('Invalid unit `#{$unit}`.');\r\n  }\r\n\r\n  @return $value * map-get($units, $unit);\r\n}\r\n\r\n///\r\n/// This mixin aims at redefining the configuration just for the scope of\r\n/// the call. It is helpful when having a component needing an extended\r\n/// configuration such as custom breakpoints (referred to as tweakpoints)\r\n/// for instance.\r\n///\r\n/// @author Kitty Giraudel\r\n///\r\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\r\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\r\n///\r\n/// @example scss - Extend the global breakpoints with a tweakpoint\r\n///  @include media-context(('custom': 678px)) {\r\n///    .foo {\r\n///      @include media('>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend the global media expressions with a custom one\r\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n/// @example scss - Extend both configuration maps\r\n///  @include media-context(('custom': 678px), ('all': 'all')) {\r\n///    .foo {\r\n///      @include media('all', '>phone', '<=custom') {\r\n///       // ...\r\n///      }\r\n///    }\r\n///  }\r\n///\r\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\r\n  // Save global configuration\r\n  $global-breakpoints: $breakpoints;\r\n  $global-media-expressions: $media-expressions;\r\n\r\n  // Update global configuration\r\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\r\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\r\n\r\n  @content;\r\n\r\n  // Restore global configuration\r\n  $breakpoints: $global-breakpoints !global;\r\n  $media-expressions: $global-media-expressions !global;\r\n}\r\n\r\n////\r\n/// include-media public exposed API\r\n/// @author Eduardo Boucas\r\n/// @access public\r\n////\r\n\r\n\r\n///\r\n/// Generates a media query based on a list of conditions\r\n///\r\n/// @param {Arglist}   $conditions  - Media query conditions\r\n///\r\n/// @example scss - With a single set breakpoint\r\n///  @include media('>phone') { }\r\n///\r\n/// @example scss - With two set breakpoints\r\n///  @include media('>phone', '<=tablet') { }\r\n///\r\n/// @example scss - With custom values\r\n///  @include media('>=358px', '<850px') { }\r\n///\r\n/// @example scss - With set breakpoints with custom values\r\n///  @include media('>desktop', '<=1350px') { }\r\n///\r\n/// @example scss - With a static expression\r\n///  @include media('retina2x') { }\r\n///\r\n/// @example scss - Mixing everything\r\n///  @include media('>=350px', '<tablet', 'retina3x') { }\r\n///\r\n@mixin media($conditions...) {\r\n  @if ($im-media-support and length($conditions) == 0) or\r\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\r\n    @content;\r\n  } @else if ($im-media-support and length($conditions) > 0) {\r\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\r\n      // Recursive call\r\n      @include media(slice($conditions, 2)...) {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n","@use '../../styles/_colors';\r\n@use '../../styles/_responsive_helper';\r\n\r\nheader {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    gap: 1rem;\r\n    padding: 8px 16px;\r\n\r\n    svg.menu-icon {\r\n        font-size: 2rem;\r\n        @include responsive_helper.media(\">tablet\") {\r\n            display: none;\r\n        }\r\n    }\r\n}","@use '../../styles/_colors';\r\n@use \"../../styles/_responsive_helper\";\r\n\r\ndiv.sidebar {\r\n    flex: 1;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    background-color: colors.$main;\r\n\r\n    @include responsive_helper.media(\"<=tablet\") {\r\n        // display: none;\r\n        \r\n        // &.open {\r\n        //     display:flex;\r\n        //     // margin-left: -54%;\r\n        // }\r\n    }\r\n\r\n    nav {\r\n        padding: 48px;\r\n\r\n        ul {\r\n            list-style: none;\r\n            padding: 0;\r\n            margin: 0;\r\n\r\n            li {\r\n                padding: 12px;\r\n\r\n                a {\r\n                    padding: 8px;\r\n                    font-size: 1.1rem;\r\n                    font-weight: 500;\r\n                    text-decoration: none;\r\n                    color: colors.$white;\r\n\r\n                    &.active {\r\n                        font-weight: 800;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    div.footer {\r\n        display: grid;\r\n        place-items: center;\r\n        padding: 24px;\r\n        border-top: 1px solid colors.$main-border;\r\n        background-color: colors.$main-dark;\r\n\r\n        p {\r\n            font-size: 14px;\r\n            margin: 0;\r\n            color: colors.$white;\r\n\r\n            a {\r\n                text-decoration: none;\r\n                color: inherit;\r\n            }\r\n        }\r\n    }\r\n}","// Colors\r\n\r\n    // Main\r\n    $accent: #02ade6;\r\n    $main: #2e3747;\r\n    $white: #FFFFFF;\r\n    // --\r\n    $error: #FF6962;\r\n    $success: #68b86f;\r\n\r\n    // Alt\r\n    $accent-dark: #0098cf;\r\n    $main-dark: #252b39;\r\n    $main-border: #404857;\r\n    $grey: #d8d8d8;\r\n    $background-dark: #e8e8e8;\r\n    $background-light: #f4f4f4;\r\n\r\n    // Inputs\r\n    $input-label: #788499;\r\n\r\n","@use '../../styles/_colors';\r\n\r\ndiv.accordion {\r\n    // max-width: 600px;\r\n    margin: 2rem auto;\r\n    \r\n    .accordion-title {\r\n        display: flex;\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n        cursor: pointer;\r\n        font-weight: 600;\r\n        background-color: colors.$background-dark;\r\n\r\n        &:hover {\r\n            background-color: colors.$grey;\r\n        }\r\n    }\r\n\r\n    .accordion-title {\r\n        padding: 1rem;\r\n    }\r\n    \r\n    .accordion-content {\r\n        padding: 1.8rem;\r\n        background-color: colors.$white;\r\n\r\n        &.hidden {\r\n            display: none;\r\n        }\r\n    }\r\n}","@use '../../../styles/_colors';\r\n\r\nlabel.wrapper {\r\n    font-size: 1rem;\r\n    display: flex;\r\n    gap: 12px;\r\n    align-items: center;\r\n\r\n    color: colors.$main;\r\n\r\n    &+label.wrapper {\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    input[type=\"checkbox\"] {\r\n        -webkit-appearance: none;\r\n        /* Remove most all native input styles */\r\n        appearance: none;\r\n        /* For iOS < 15 */\r\n        background-color: #AAAAAA10;\r\n        /* Not removed with appearance */\r\n        margin: 0;\r\n\r\n        display: grid;\r\n        place-content: center;\r\n\r\n        width: 1.5rem;\r\n        height: 1.5rem;\r\n        border: 2px solid colors.$grey;\r\n        border-radius: 1px;\r\n\r\n\r\n        &::before {\r\n            content: \"\";\r\n            width: 0.65em;\r\n            height: 0.65em;\r\n            clip-path: polygon(14% 50%, 0% 70%, 35% 100%, 100% 12%, 88% 0%, 35% 65%);\r\n            transform: scale(0) rotate(90deg);\r\n            transform-origin: center center;\r\n            transition: 0.25s ease-in-out;\r\n            background-color: colors.$white;\r\n\r\n        }\r\n\r\n        &:checked {\r\n            background-color: colors.$accent;\r\n            border-color: colors.$accent-dark;\r\n\r\n            &+* {\r\n                font-weight: 700;\r\n            }\r\n\r\n            &::before {\r\n                transform: scale(1.2) rotate(0deg);\r\n            }\r\n        }\r\n\r\n        // &:focus {\r\n        //     outline: max(2px, 0.15em) solid currentColor;\r\n        //     outline-offset: max(2px, 0.15em);\r\n        // }\r\n\r\n        &:disabled {\r\n            --form-control-color: var(--form-control-disabled);\r\n\r\n            color: var(--form-control-disabled);\r\n            cursor: not-allowed;\r\n        }\r\n    }\r\n}","@use '../../../../styles/_colors';\r\n\r\ndiv.wrapper {\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    // align-content: flex-start;\r\n    gap: 2rem 4rem;\r\n    // max-height: 320px;\r\n\r\n    & > div {\r\n        flex-basis: 35%;\r\n    }\r\n\r\n    & > div:first-of-type {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: 2rem 4rem;\r\n    }\r\n}","@use '../styles/_colors';\r\n\r\ndiv.wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    // flex-basis: 50%;\r\n\r\n    label {\r\n        display: inline;\r\n        font-size: 1rem;\r\n        font-weight: 600;\r\n        color: colors.$main;\r\n    }\r\n\r\n    input {\r\n        -webkit-appearance: none;\r\n        -webkit-border-radius: 0;\r\n        border-radius: 0;\r\n        display: inline;\r\n        font-size: 1rem;\r\n        padding: 12px 8px;\r\n        border: none;\r\n        border-bottom: 2px solid colors.$grey;\r\n\r\n        &:focus {\r\n            outline: none;\r\n        }\r\n\r\n        &.error {\r\n            border-color: colors.$error;\r\n        }\r\n    }\r\n\r\n    p {\r\n        &.error {\r\n            color: colors.$error;\r\n            transition: 0.25s;\r\n\r\n            &.hidden {\r\n                height: 0;\r\n                margin: 0;\r\n                opacity: 0;\r\n                visibility: hidden;\r\n            }\r\n        }\r\n    }\r\n}","@use '../../../styles/_colors';\r\n@use '../../../styles/_responsive_helper';\r\n\r\ninput.button {\r\n    -webkit-appearance: none;\r\n    -webkit-border-radius: 0px;\r\n    padding: 10px 64px;\r\n    border: none;\r\n    border-radius: 2rem;\r\n    background-color: colors.$white;\r\n\r\n    font-weight: 600;\r\n    font-size: 1rem;\r\n    color: colors.$main;\r\n\r\n    @include responsive_helper.media(\"<=tablet\") {\r\n        width: 100%;\r\n    }\r\n\r\n    &:hover {\r\n        cursor: pointer;\r\n    }\r\n\r\n    &.primary {\r\n        color: colors.$white;\r\n        background-color: colors.$accent;\r\n\r\n        &:hover {\r\n            background-color: colors.$accent-dark;\r\n        }\r\n    }\r\n\r\n    &.secondary {\r\n        border: 1px solid colors.$grey;\r\n        color: colors.$main;\r\n\r\n        &:hover {\r\n            @include responsive_helper.media(\">tablet\") {\r\n                background-color: colors.$grey;\r\n            }\r\n        }\r\n\r\n        @include responsive_helper.media(\"<=tablet\") {\r\n            background-color: transparent;\r\n            border: none;\r\n        }\r\n    }\r\n}","@use '../../styles/_colors';\r\n@use '../../styles/_responsive_helper';\r\n\r\ndiv.container {\r\n    flex: 3.5;\r\n    padding: 48px;\r\n    background-color: colors.$background-light;\r\n    overflow-y: scroll;\r\n\r\n    h1.pageTitle {\r\n        margin: 0;\r\n        font-size: 2rem;\r\n        font-weight: 500;\r\n        color: colors.$main;\r\n    }\r\n\r\n    div.actionsWrapper {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        gap: 1rem;\r\n\r\n        @include responsive_helper.media(\"<=tablet\") {\r\n            flex-wrap: wrap-reverse;\r\n            justify-content: center;\r\n        }\r\n    }\r\n}"],"names":[],"sourceRoot":""}